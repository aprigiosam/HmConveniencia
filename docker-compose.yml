# Docker Compose Unificado - Desenvolvimento e Produção
# Use: docker-compose up (dev) ou docker-compose --profile prod up (prod)

services:
  # ===================
  # DATABASE
  # ===================
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-comercio_db}
      POSTGRES_USER: ${POSTGRES_USER:-comercio_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-comercio_pass123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================
  # CACHE
  # ===================
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================
  # BACKEND (Django)
  # ===================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DEBUG: ${DEBUG:-True}
      DATABASE_URL: postgresql://${POSTGRES_USER:-comercio_user}:${POSTGRES_PASSWORD:-comercio_pass123}@db:5432/${POSTGRES_DB:-comercio_db}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-django-insecure-dev-key}
      ALLOWED_HOSTS: localhost,127.0.0.1,192.168.230.114,192.168.15.7
    volumes:
      - ./backend:/app
      - ./backup:/app/backup
      - ./logs:/app/logs
    command: python manage.py runserver 0.0.0.0:8000

  # ===================
  # FRONTEND (React/Vite) - DEV
  # ===================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      VITE_API_URL: http://localhost:8000/api/v1

  # ===================
  # FRONTEND - PRODUÇÃO
  # ===================
  frontend-prod:
    profiles: ["prod"]
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-prod
    ports:
      - "80:80"
    depends_on:
      - backend

  # ===================
  # WORKER (Celery) - Opcional
  # ===================
  worker:
    profiles: ["worker"]
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    depends_on:
      - backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-comercio_user}:${POSTGRES_PASSWORD:-comercio_pass123}@db:5432/${POSTGRES_DB:-comercio_db}
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    command: celery -A config worker -l info

  # ===================
  # SCHEDULER (Celery Beat) - Opcional
  # ===================
  scheduler:
    profiles: ["worker"]
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    depends_on:
      - backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-comercio_user}:${POSTGRES_PASSWORD:-comercio_pass123}@db:5432/${POSTGRES_DB:-comercio_db}
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    command: celery -A config beat -l info

volumes:
  postgres_data: