#!/bin/bash

# Script completo para executar todos os testes do projeto
# Uso: ./scripts/run_tests.sh [--coverage] [--frontend-only] [--backend-only]

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
COVERAGE=false
FRONTEND_ONLY=false
BACKEND_ONLY=false

# Parse argumentos
for arg in "$@"; do
    case $arg in
        --coverage)
            COVERAGE=true
            shift
            ;;
        --frontend-only)
            FRONTEND_ONLY=true
            shift
            ;;
        --backend-only)
            BACKEND_ONLY=true
            shift
            ;;
        *)
            echo "Uso: $0 [--coverage] [--frontend-only] [--backend-only]"
            exit 1
            ;;
    esac
done

echo -e "${BLUE}üß™ Iniciando execu√ß√£o completa dos testes${NC}"
echo "=================================================="

# Fun√ß√£o para executar comando e capturar status
run_command() {
    local cmd="$1"
    local description="$2"

    echo -e "\n${YELLOW}‚ñ∂ $description${NC}"

    if eval "$cmd"; then
        echo -e "${GREEN}‚úÖ $description - SUCESSO${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $description - FALHOU${NC}"
        return 1
    fi
}

# Fun√ß√£o para executar testes do backend
run_backend_tests() {
    echo -e "\n${BLUE}üêç Executando testes do Backend (Django)${NC}"
    echo "----------------------------------------"

    cd backend

    # Verifica se o ambiente virtual est√° ativo
    if [[ "$VIRTUAL_ENV" == "" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Ativando ambiente virtual...${NC}"
        source venv/bin/activate || {
            echo -e "${RED}‚ùå Erro: ambiente virtual n√£o encontrado em backend/venv${NC}"
            echo "Execute: cd backend && python -m venv venv && source venv/bin/activate && pip install -r requirements.txt"
            exit 1
        }
    fi

    # Instala depend√™ncias se necess√°rio
    run_command "pip install -q -r requirements.txt" "Instalando depend√™ncias do backend"

    # Executa migra√ß√µes para teste
    run_command "python manage.py migrate --settings=comercio.settings" "Executando migra√ß√µes"

    # Testa se o servidor consegue iniciar
    run_command "python manage.py check --settings=comercio.settings" "Verificando configura√ß√µes do Django"

    # Executa testes
    if [[ "$COVERAGE" == true ]]; then
        echo -e "\n${YELLOW}üìä Executando testes com coverage...${NC}"
        run_command "coverage run --source='.' manage.py test --keepdb --parallel auto" "Testes Django com coverage"
        run_command "coverage report -m" "Relat√≥rio de coverage"
        run_command "coverage html" "Gerando relat√≥rio HTML de coverage"
        echo -e "${GREEN}üìä Relat√≥rio de coverage dispon√≠vel em: backend/htmlcov/index.html${NC}"
    else
        run_command "python manage.py test --keepdb --parallel auto" "Testes Django"
    fi

    cd ..
}

# Fun√ß√£o para executar testes do frontend
run_frontend_tests() {
    echo -e "\n${BLUE}‚öõÔ∏è  Executando testes do Frontend (React/Vitest)${NC}"
    echo "----------------------------------------"

    cd frontend

    # Instala depend√™ncias se necess√°rio
    if [[ ! -d "node_modules" ]]; then
        run_command "npm install" "Instalando depend√™ncias do frontend"
    fi

    # Executa lint
    run_command "npm run lint" "ESLint"

    # Executa type check
    run_command "npm run build" "Type checking e build"

    # Executa testes
    if [[ "$COVERAGE" == true ]]; then
        echo -e "\n${YELLOW}üìä Executando testes com coverage...${NC}"
        run_command "npm run test -- --coverage" "Testes Vitest com coverage"
    else
        run_command "npm test" "Testes Vitest"
    fi

    cd ..
}

# Fun√ß√£o para executar testes de integra√ß√£o
run_integration_tests() {
    echo -e "\n${BLUE}üîó Executando testes de integra√ß√£o${NC}"
    echo "----------------------------------------"

    # Verifica se os servi√ßos est√£o rodando
    echo -e "${YELLOW}üîç Verificando se os servi√ßos est√£o dispon√≠veis...${NC}"

    # Test health endpoint
    if curl -s http://localhost:8000/api/v1/health/ > /dev/null; then
        echo -e "${GREEN}‚úÖ Backend est√° rodando${NC}"

        # Testa endpoints principais
        run_command "curl -s -f http://localhost:8000/api/v1/monitoring/metrics/" "Endpoint de m√©tricas"
        run_command "curl -s -f http://localhost:8000/api/v1/monitoring/status/" "Endpoint de status"

    else
        echo -e "${YELLOW}‚ö†Ô∏è  Backend n√£o est√° rodando. Iniciando com Docker...${NC}"
        run_command "docker compose up -d backend db redis" "Iniciando servi√ßos com Docker"

        # Espera o backend ficar pronto
        echo -e "${YELLOW}‚è≥ Aguardando backend ficar pronto...${NC}"
        for i in {1..30}; do
            if curl -s http://localhost:8000/api/v1/health/ > /dev/null; then
                echo -e "${GREEN}‚úÖ Backend est√° pronto!${NC}"
                break
            fi
            echo -n "."
            sleep 2
        done
    fi

    # Test frontend
    if curl -s http://localhost:3000 > /dev/null; then
        echo -e "${GREEN}‚úÖ Frontend est√° rodando${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Frontend n√£o detectado (OK se n√£o estiver em desenvolvimento)${NC}"
    fi
}

# Execu√ß√£o principal
main() {
    local start_time=$(date +%s)
    local failed_tests=0

    echo -e "${BLUE}üöÄ Com√©rcio Pro - Suite de Testes${NC}"
    echo -e "${YELLOW}Configura√ß√£o:${NC}"
    echo "  Coverage: $COVERAGE"
    echo "  Frontend only: $FRONTEND_ONLY"
    echo "  Backend only: $BACKEND_ONLY"
    echo ""

    # Executa testes conforme configura√ß√£o
    if [[ "$FRONTEND_ONLY" == false ]]; then
        if ! run_backend_tests; then
            failed_tests=$((failed_tests + 1))
        fi
    fi

    if [[ "$BACKEND_ONLY" == false ]]; then
        if ! run_frontend_tests; then
            failed_tests=$((failed_tests + 1))
        fi
    fi

    # Testes de integra√ß√£o apenas se ambos os tipos foram executados
    if [[ "$FRONTEND_ONLY" == false && "$BACKEND_ONLY" == false ]]; then
        if ! run_integration_tests; then
            failed_tests=$((failed_tests + 1))
        fi
    fi

    # Relat√≥rio final
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))

    echo ""
    echo "=================================================="
    if [[ $failed_tests -eq 0 ]]; then
        echo -e "${GREEN}üéâ TODOS OS TESTES PASSARAM! üéâ${NC}"
        echo -e "${GREEN}‚úÖ Tempo total: ${duration}s${NC}"

        # Dicas √∫teis
        echo ""
        echo -e "${BLUE}üí° Pr√≥ximos passos:${NC}"
        echo "  ‚Ä¢ Execute 'make up' para iniciar o sistema completo"
        echo "  ‚Ä¢ Acesse http://localhost:3000 para o frontend"
        echo "  ‚Ä¢ Acesse http://localhost:8000/api/docs para a documenta√ß√£o da API"
        echo "  ‚Ä¢ Acesse http://localhost:8000/api/v1/monitoring/metrics/ para m√©tricas"

        if [[ "$COVERAGE" == true ]]; then
            echo ""
            echo -e "${BLUE}üìä Relat√≥rios de coverage:${NC}"
            echo "  ‚Ä¢ Backend: backend/htmlcov/index.html"
            echo "  ‚Ä¢ Frontend: frontend/coverage/index.html"
        fi

        exit 0
    else
        echo -e "${RED}‚ùå $failed_tests teste(s) falharam${NC}"
        echo -e "${RED}‚è±Ô∏è  Tempo total: ${duration}s${NC}"
        echo ""
        echo -e "${YELLOW}üí° Para debugar:${NC}"
        echo "  ‚Ä¢ Verifique os logs acima"
        echo "  ‚Ä¢ Execute os testes individualmente"
        echo "  ‚Ä¢ Backend: cd backend && python manage.py test"
        echo "  ‚Ä¢ Frontend: cd frontend && npm test"
        exit 1
    fi
}

# Executa fun√ß√£o principal
main