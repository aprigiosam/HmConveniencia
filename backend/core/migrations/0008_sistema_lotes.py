# Generated by Claude Code on 2025-10-20

import decimal
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models
from django.utils import timezone


def migrar_produtos_para_lotes(apps, schema_editor):
    """
    Migra produtos existentes com data_validade para o sistema de lotes.
    Produtos SEM data_validade n√£o s√£o migrados (n√£o precisam de lotes).
    """
    Produto = apps.get_model("core", "Produto")
    Lote = apps.get_model("core", "Lote")

    produtos_migrados = 0
    lotes_criados = 0

    # Busca produtos com data_validade preenchida e estoque > 0
    produtos_com_validade = Produto.objects.filter(data_validade__isnull=False).exclude(
        estoque=0
    )

    for produto in produtos_com_validade:
        # Cria lote autom√°tico para o produto
        lote = Lote.objects.create(
            produto=produto,
            numero_lote=f"MIGRADO-{produto.id}",
            quantidade=produto.estoque,
            data_validade=produto.data_validade,
            data_entrada=timezone.now().date(),
            preco_custo_lote=produto.preco_custo if produto.preco_custo > 0 else None,
            observacoes="Lote criado automaticamente na migra√ß√£o do sistema",
            ativo=True,
        )

        produtos_migrados += 1
        lotes_criados += 1

    print(f"\n‚úÖ Migra√ß√£o conclu√≠da!")
    print(f"üì¶ Produtos migrados: {produtos_migrados}")
    print(f"üìã Lotes criados: {lotes_criados}")

    # Busca produtos SEM data_validade (n√£o foram migrados)
    produtos_sem_validade = Produto.objects.filter(data_validade__isnull=True).count()
    print(f"‚ÑπÔ∏è  Produtos sem validade (n√£o migrados): {produtos_sem_validade}")


def reverter_migracao(apps, schema_editor):
    """
    Reverte a migra√ß√£o removendo todos os lotes criados automaticamente.
    """
    Lote = apps.get_model("core", "Lote")

    # Remove apenas lotes criados na migra√ß√£o
    lotes_migrados = Lote.objects.filter(numero_lote__startswith="MIGRADO-")
    count = lotes_migrados.count()
    lotes_migrados.delete()

    print(f"\n‚è™ Migra√ß√£o revertida!")
    print(f"üóëÔ∏è  Lotes removidos: {count}")


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0007_alerta"),
    ]

    operations = [
        # Cria a tabela Lote
        migrations.CreateModel(
            name="Lote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "numero_lote",
                    models.CharField(
                        blank=True,
                        help_text="C√≥digo do lote (opcional)",
                        max_length=100,
                        verbose_name="N√∫mero do Lote",
                    ),
                ),
                (
                    "quantidade",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(
                                decimal.Decimal("0.00"),
                                message="Quantidade n√£o pode ser negativa",
                            )
                        ],
                        verbose_name="Quantidade",
                    ),
                ),
                (
                    "data_validade",
                    models.DateField(
                        blank=True,
                        help_text="Data de vencimento do lote",
                        null=True,
                        verbose_name="Data de Validade",
                    ),
                ),
                (
                    "data_entrada",
                    models.DateField(
                        auto_now_add=True,
                        help_text="Data de cadastro do lote",
                        verbose_name="Data de Entrada",
                    ),
                ),
                (
                    "fornecedor",
                    models.CharField(
                        blank=True,
                        help_text="Nome do fornecedor (opcional)",
                        max_length=200,
                        verbose_name="Fornecedor",
                    ),
                ),
                (
                    "preco_custo_lote",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Pre√ßo de custo espec√≠fico deste lote (opcional)",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                decimal.Decimal("0.00"),
                                message="Pre√ßo n√£o pode ser negativo",
                            )
                        ],
                        verbose_name="Pre√ßo de Custo do Lote",
                    ),
                ),
                (
                    "observacoes",
                    models.TextField(blank=True, verbose_name="Observa√ß√µes"),
                ),
                ("ativo", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                (
                    "produto",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lotes",
                        to="core.produto",
                        verbose_name="Produto",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lote",
                "verbose_name_plural": "Lotes",
                "ordering": ["data_validade", "data_entrada"],
                "indexes": [
                    models.Index(
                        fields=["produto", "ativo"], name="core_lote_produto_ativo_idx"
                    ),
                    models.Index(
                        fields=["data_validade"], name="core_lote_data_validade_idx"
                    ),
                    models.Index(
                        fields=["numero_lote"], name="core_lote_numero_lote_idx"
                    ),
                    models.Index(
                        fields=["produto", "data_validade", "ativo"],
                        name="core_lote_produto_validade_ativo_idx",
                    ),
                ],
            },
        ),
        # Executa a migra√ß√£o de dados
        migrations.RunPython(
            migrar_produtos_para_lotes, reverse_code=reverter_migracao
        ),
    ]
